namespace LeetCode.Plume
{
    public class Test3
    {
        public static void Test()
        {
            //var res = solution(new[] { 100,100,100,100,100,100,100,100,100,1,1,1,2,2,2,3,3,3 });//3
            //var res = solution(new[] { 100,100,100,100,100,100,100,100,100,1,1,1,1,2,2,2,3,3,3 });//1
            //var res = solution(new[] { 3, 3, 2, 2, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 1, 1, 2, 2, 2, 3, 3, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3 });//2
            //var res = solution(new[] { 5, 3, 3, 2, 5, 2, 3, 2 });//2
            //var res = solution(null);//2
            //var res = solution(new[] { 1, 1, 1, 2, 2, 2 });//1
            //var res = solution(new[] { 127, 15, 3, 8, 10 });//1
            //var res = solution(new[] { 2595814, 2429669, 2203941, 532167, 431162, 1857234, 1789274, 591929, 281286, 1751009, 677400, 1632446, 404237, 2777994, 2365823, 1552317, 1966082, 2622418, 1428939, 1820749, 1882330, 1387164, 1927728, 2330149, 1035138, 2455119, 1328975, 1250767, 1717748, 1252765, 53831, 1090154, 1848638, 2306104, 1006050, 577434, 2414411, 2164962, 2833077, 2412699, 1375064, 470140, 826757, 287119, 757941, 1694838, 433210, 920731, 5569, 117915, 182787, 251271, 1777857, 167996, 2262605, 1094191, 1877566, 18572, 1881059, 2295781, 1590181, 2255374, 531233, 1803944, 247872, 972163, 1832579, 134735, 1790933, 36559, 774696, 2290087, 2273672, 1648732, 2602082, 1864851, 1055771, 498714, 1699933, 127148, 625520, 2988814, 1274617, 716638, 2410068, 2005682, 1221003, 2337189, 1037909, 1433532, 2417386, 2888173, 2564395, 1652155, 386552, 2901158, 1942690, 927871, 2349901, 979075, 1884236, 2869858, 2036457, 102952, 2538722, 2659446, 1569264, 172968, 69675, 2422678, 2593741, 963614, 2079385, 667715, 883638, 842780, 298562, 2387322, 1350517, 2634718, 205757, 2463835, 1218055, 2847886, 2507802, 821802, 1595796, 2549209, 1715700, 1123900, 310803, 1644917, 2349922, 799884, 19627, 2487756, 2438955, 2823848, 1235195, 2582793, 744832, 1777905, 2662042, 2440902, 994383, 1777953, 1961407, 2754735, 1884888, 1767142, 2417269, 2734292, 858959, 1080384, 1931970, 2016625, 1955810, 2451004, 2863455, 1429461, 628445, 514306, 2041461, 1598697, 295827, 707402, 2274409, 485299, 1727716, 2802945, 1504538, 659859, 767643, 686322, 1077757, 1450082, 1147818, 536305, 674049, 343730, 820642, 2597213, 1213984, 1933378, 1852212, 317914, 1451746, 1020666, 1244829, 2832286, 2828914, 790005, 1515306, 46425, 1691133, 761622, 211636, 1309843, 259790, 1461418 });//1
            var res = solution(new[] { 2595814, 2429669, 2203941, 532167, 431162, 1857234, 1789274, 591929, 281286, 1751009, 677400, 1632446, 404237, 2777994, 2365823, 1552317, 1966082, 2622418, 1428939, 1820749, 1882330, 1387164, 1927728, 2330149, 1035138, 2455119, 1328975, 1250767, 1717748, 1252765, 53831, 1090154, 1848638, 2306104, 1006050, 577434, 2414411, 2164962, 2833077, 2412699, 1375064, 470140, 826757, 287119, 757941, 1694838, 433210, 920731, 5569, 117915, 182787, 251271, 1777857, 167996, 2262605, 1094191, 1877566, 18572, 1881059, 2295781, 1590181, 2255374, 531233, 1803944, 247872, 972163, 1832579, 134735, 1790933, 36559, 774696, 2290087, 2273672, 1648732, 2602082, 1864851, 1055771, 498714, 1699933, 127148, 625520, 2988814, 1274617, 716638, 2410068, 2005682, 1221003, 2337189, 1037909, 1433532, 2417386, 2888173, 2564395, 1652155, 386552, 2901158, 1942690, 927871, 2349901, 979075, 1884236, 2869858, 2036457, 102952, 2538722, 2659446, 1569264, 172968, 69675, 2422678, 2593741, 963614, 2079385, 667715, 883638, 842780, 298562, 2387322, 1350517, 2634718, 205757, 2463835, 1218055, 2847886, 2507802, 821802, 1595796, 2549209, 1715700, 1123900, 310803, 1644917, 2349922, 799884, 19627, 2487756, 2438955, 2823848, 1235195, 2582793, 744832, 1777905, 2662042, 2440902, 994383, 1777953, 1961407, 2754735, 1884888, 1767142, 2417269, 2734292, 858959, 1080384, 1931970, 2016625, 1955810, 2451004, 2863455, 1429461, 628445, 514306, 2041461, 1598697, 295827, 707402, 2274409, 485299, 1727716, 2802945, 1504538, 659859, 767643, 686322, 1077757, 1450082, 1147818, 536305, 674049, 343730, 820642, 2597213, 1213984, 1933378, 1852212, 317914, 1451746, 1020666, 1244829, 2832286, 2828914, 790005, 1515306, 46425, 1691133, 761622, 211636, 1309843, 259790, 1461418, 46425, 1691133, 761622, 211636, 1309843, 259790, 1461418, 46425, 1691133, 761622, 211636, 1309843, 259790, 1461418, 46425, 1691133, 761622, 211636, 1309843, 259790, 1461418 });//1
            Console.WriteLine(res);
        }

        private static int solution(int[] A)
        {
            if (A == null || A.Length == 0) return 0;

            var res = 0;
            var dict = new Dictionary<int, int>();
            var maxTimes = 0;

            for (var i = 0; i < A.Length; i++)
            {
                if (dict.ContainsKey(A[i]))
                    dict[A[i]]++;
                else dict.Add(A[i], 1);
                maxTimes = maxTimes > dict[A[i]] ? maxTimes : dict[A[i]];
            }

            var stack = new Stack<int>();
            foreach (var item in dict)
            {
                if (stack.Count == 0)
                {
                    stack.Push(item.Value);
                }
                else
                {
                    var temp = new Stack<int>();
                    while (stack.Count > 0 && stack.Peek() > item.Value)
                    {
                        temp.Push(stack.Pop());
                    }
                    stack.Push(item.Value);
                    while (temp.Count > 0)
                    {
                        stack.Push(temp.Pop());
                    }
                }
            }

            while (stack.Count > 0)
            {
                var item = stack.Pop();
                if (item >= maxTimes)
                {
                    res += item - maxTimes;
                    maxTimes = maxTimes - 1 > 0 ? maxTimes - 1 : 0;
                }
                else
                    maxTimes = item - 1;
            }

            return res;
        }
    }
}